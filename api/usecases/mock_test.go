// Code generated by MockGen. DO NOT EDIT.
// Source: ./coins.go

// Package usecases is a generated GoMock package.
package usecases

import (
	entities "crypto-viewer/src/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCoinsAdapter is a mock of CoinsAdapter interface.
type MockCoinsAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockCoinsAdapterMockRecorder
}

// MockCoinsAdapterMockRecorder is the mock recorder for MockCoinsAdapter.
type MockCoinsAdapterMockRecorder struct {
	mock *MockCoinsAdapter
}

// NewMockCoinsAdapter creates a new mock instance.
func NewMockCoinsAdapter(ctrl *gomock.Controller) *MockCoinsAdapter {
	mock := &MockCoinsAdapter{ctrl: ctrl}
	mock.recorder = &MockCoinsAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoinsAdapter) EXPECT() *MockCoinsAdapterMockRecorder {
	return m.recorder
}

// GetCoins mocks base method.
func (m *MockCoinsAdapter) GetCoins(arg0 map[string]string) (entities.CoinsData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoins", arg0)
	ret0, _ := ret[0].(entities.CoinsData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoins indicates an expected call of GetCoins.
func (mr *MockCoinsAdapterMockRecorder) GetCoins(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoins", reflect.TypeOf((*MockCoinsAdapter)(nil).GetCoins), arg0)
}

// MockExchangeAdapter is a mock of ExchangeAdapter interface.
type MockExchangeAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeAdapterMockRecorder
}

// MockExchangeAdapterMockRecorder is the mock recorder for MockExchangeAdapter.
type MockExchangeAdapterMockRecorder struct {
	mock *MockExchangeAdapter
}

// NewMockExchangeAdapter creates a new mock instance.
func NewMockExchangeAdapter(ctrl *gomock.Controller) *MockExchangeAdapter {
	mock := &MockExchangeAdapter{ctrl: ctrl}
	mock.recorder = &MockExchangeAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeAdapter) EXPECT() *MockExchangeAdapterMockRecorder {
	return m.recorder
}

// GetExchangeRate mocks base method.
func (m *MockExchangeAdapter) GetExchangeRate() (entities.ExchangeRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRate")
	ret0, _ := ret[0].(entities.ExchangeRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeRate indicates an expected call of GetExchangeRate.
func (mr *MockExchangeAdapterMockRecorder) GetExchangeRate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRate", reflect.TypeOf((*MockExchangeAdapter)(nil).GetExchangeRate))
}
